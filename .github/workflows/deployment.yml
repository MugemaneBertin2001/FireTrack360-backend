name: Deploy FireTrack360 to DigitalOcean

on:
  push:
    branches: ['main']

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/firetrack360-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Create environment file on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /root/firetrack360
            cat > /root/firetrack360/env.production << "EOL"
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}  
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            SALT_ROUNDS=${{ secrets.SALT_ROUNDS }}
            EMAIL_API_URL=${{ secrets.EMAIL_API_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            EOL

      - name: Copy Docker Compose file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          source: 'docker-compose.production.yml'
          target: '/root/firetrack360'

      - name: Deploy FireTrack360 on DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            cd /root/firetrack360
            cp env.production .env
            docker compose pull
            docker compose down
            docker compose -f docker-compose.production.yml up -d

            echo "Waiting for services to be healthy..."

            timeout=60
            while [[ $timeout -gt 0 ]]; do
              health_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health || echo "000") 
              if [[ $health_status == "200" ]]; then
                echo "Services are healthy"
                break
              fi
              sleep 5
              timeout=$((timeout - 5))
            done

            if [[ $timeout -le 0 ]]; then
              echo "Timed out waiting for services to be healthy"
              docker compose logs
              exit 1
            fi

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            cd /root/firetrack360

            # Check each service's health individually
            services=(backend database)  # add more if needed
            for service in "${services[@]}"; do
              health_check=$(docker compose exec -T $service /bin/bash -c "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3000/health || echo \"000\"")
              if [[ $health_check != "200" ]]; then
                echo "$service health check failed with status $health_check"
                docker compose logs $service
                exit 1
              fi
            done

            echo "Deployment successful!"

      - name: Notify on success
        if: success()
        run: |
          # Add your notification logic here (e.g., post to Slack, send email)
          echo "Deployment succeeded!"

      - name: Notify on failure
        if: failure()
        run: |
          # Add your notification logic here
          echo "Deployment failed!"
